import pickle
import os
import sys
sys.path.insert(0, os.path.join('04_analysis', 'src'))
import estuary_salinity_functional_performance_func as esfp
import XAI_functions

configfile: "03_model/model_config.yaml"


run_id = config['run_id']
sources = ['discharge_01474500','discharge_01463500']
sinks = ['saltfront_obs', 'ml_pred','coawst_pred']
years = ['2001','2002','2003','2004','2005','2006','2007','2008','2009','2010',
        '2011','2012','2013','2014','2015', '2016','2017', '2018','2019','2020'] 


rule all_model_analysis:
    input:
        os.path.join('03_model','out',run_id,'ML_COAWST_Results_Input_Cleaned.csv'),
        os.path.join('04_analysis','out',run_id+'_it_df.csv'),
        os.path.join('04_analysis','out', run_id+'_functional_performance_df.csv')

###########################################################################################                        
#SUMMARIZE MODEL RESULTS AND PREPARE DATA FOR CALCULATIONS
########################################################################################### 
rule create_cleaned_io_file:
    output:
        os.path.join('03_model','out',run_id,'ML_COAWST_Results_Input_Cleaned.csv')
    run:
        esfp.create_cleaned_io_file(run_id)
##---------------------------------------------------------------------------------------##  

###########################################################################################                        
#CALCULATE MUTUAL INFORMATION AND TRANSFER ENTROPY BY PAIRS
########################################################################################### 
rule calc_it_metrics_for_pairs:
    input:
        os.path.join('03_model','out',run_id,'ML_COAWST_Results_Input_Cleaned.csv')
    output:
        os.path.join('04_analysis','out',run_id+'_it_df.csv')
    run:
        esfp.calc_it_metrics_for_pairs(data_loc = input[0], 
                                    sources = sources, 
                                    sinks = sinks, 
                                    years = years, 
                                    run_id = run_id)
##---------------------------------------------------------------------------------------##  
                                    
###########################################################################################                        
#CALCULATE FUNCTIONAL PERFORMANCE BASED ON TRANSFER ENTROPY CALCS
########################################################################################### 
rule calc_functional_performance:
    input:
        os.path.join('04_analysis','out',run_id+'_it_df.csv')
    output:
        os.path.join('04_analysis', 'out', run_id+'_functional_performance_df.csv')
    run:
        esfp.calc_functional_performance(it_df_loc = input[0], 
                                        sources = sources, 
                                        sinks = sinks, 
                                        years = years, 
                                        write_loc = output[0])
##---------------------------------------------------------------------------------------##  

###########################################################################################                        
#WRAPPER FUNCTION FOR CALCULATING FUNCTIONAL PERFORMANCE
########################################################################################### 
rule calc_functional_performance_wrapper:
    output:
        os.path.join('04_analysis/out',run_id+'_it_df.csv'),
        os.path.join('04_analysis/out', run_id+'_functional_performance_df.csv')
    run:
        esfp.calc_functional_performance_wrapper(run_id = run_id,   
                                                sources = sources, 
                                                sinks = sinks, 
                                                years = years, 
                                                it_df_loc = output[0])
##---------------------------------------------------------------------------------------##  

###########################################################################################                        
#GENERATE MANUSCRIPT FIGURES 2-6 (RUN ID PARAMETER MUST BE UPDATED IN THE results.R script)
########################################################################################### 
rule generate_manuscript_figures:
    input:
        script = '04_analysis/src/results.R'
    output:
        '04_analysis/fig/fig_2.pdf',
        '04_analysis/fig/fig_3.pdf',
        '04_analysis/fig/fig_4.pdf',
        '04_analysis/fig/fig_5.pdf',
        '04_analysis/fig/fig_6.pdf'
    shell:
        r"""
        "C:\Users\yourname\AppData\Local\R\R-41~1.1\bin\x64\Rscript.exe" 04_analysis\src\results.R
        """

##---------------------------------------------------------------------------------------##

###########################################################################################                        
#CALCULATE EXPECTED GRADIENTS FOR MODEL RESULTS
########################################################################################### 
rule calc_expected_gradients:
    input:
        '03_model/model_config.yaml',
        os.path.join('03_model/out',run_id,'ML_COAWST_Results_Input_Cleaned.csv')
    output:
        os.path.join('04_analysis/out/',run_id+'_expected_gradients_w_variables.csv')
    run:
        XAI_functions.calc_EGs_for_model(config_loc = input[0], n_samples = 2, write_loc = output[0])

##---------------------------------------------------------------------------------------##

###########################################################################################                        
#PLOT EXPECTED GRADIENTS FOR A SINGLE YEAR (FIGURE 7 IN MANUSCRIPT)
########################################################################################### 
rule generate_expected_gradient_figure:
    input:
        os.path.join('04_analysis/out/',run_id+'_expected_gradients_w_variables.csv')
    output:
        '04_analysis/fig/fig_7'
    run:
        XAI_functions.plot_EGs_single_year(eg_df_loc = input[0], 
                                            year = '2019', 
                                            save_loc = output[0],
                                            ext = 'pdf')
##---------------------------------------------------------------------------------------##

