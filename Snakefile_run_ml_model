import importlib
import os
import sys
sys.path.insert(0, os.path.join(os.getcwd(), '03_model', 'src'))
from river_dl.preproc_utils import prep_all_data
import run_model


configfile: "01_fetch/wildcards_fetch_config.yaml"
configfile: "03_model/model_config.yaml"

usgs_nwis_sites = config["fetch_usgs_nwis.py"]["sites"]
noaa_nos_sites = config["fetch_noaa_nos.py"]["sites"]
noaa_nos_products = config["fetch_noaa_nos.py"]["products"]
noaa_nerr_site = config["fetch_noaa_nerrs.py"]["sites"]
replicates = [str(x).rjust(2,'0') for x in range(config['replicates'])]

wildcard_constraints:
    noaa_nos_sites="\d+"

include: "Snakefile_fetch_munge"

###########################################################################################                        
#RULE ALL
########################################################################################### 
rule all_ml_model:
    input:
        expand("02_munge/out/D/usgs_nwis_{usgs_nwis_site}.csv", usgs_nwis_site = usgs_nwis_sites),
        expand("02_munge/out/daily_summaries/noaa_nos_{noaa_nos_site}.csv", noaa_nos_site = noaa_nos_sites),
        expand("02_munge/out/D/noaa_nerrs_{noaa_nerr_site}.csv", noaa_nerr_site = noaa_nerr_site),
        os.path.join("03_model", "out", config['run_id'], "inputs.zarr"),
        os.path.join("03_model", "out", config['run_id'], "target.zarr"),
        os.path.join("03_model", "out", config['run_id'], "prepped_model_io_data"),
        os.path.join(config['out_dir'], config['run_id'], 'model_param_output.txt'),
        os.path.join(config['out_dir'], config['run_id'], 'losses.png'),
        os.path.join(config['out_dir'], config['run_id'], 'weights.pt'),
        os.path.join(config['out_dir'],config['run_id'],"ModelResults.csv"),
        os.path.join(config['out_dir'],config['run_id'],"ModelResultsTimeSeries.png"),
        "03_model/hyperparameter_config.yaml"
##---------------------------------------------------------------------------------------##  

###########################################################################################                        
#PREPARE THE INPUT DATA
########################################################################################### 
rule prepare_inputs_targets:
    input:
        "03_model/model_config.yaml",
        expand("02_munge/out/D/usgs_nwis_{usgs_nwis_site}.csv", usgs_nwis_site = usgs_nwis_sites),
        expand("02_munge/out/daily_summaries/noaa_nos_{noaa_nos_site}.csv", noaa_nos_site = noaa_nos_sites),
        expand("02_munge/out/D/noaa_nerrs_{noaa_nerr_site}.csv", noaa_nerr_site = noaa_nerr_site)
    output:
        directory(os.path.join("03_model", "out", config['run_id'], "inputs.zarr")),
        directory(os.path.join("03_model", "out", config['run_id'], "target.zarr")),
        os.path.join("03_model", "out", config['run_id'], "prepped_model_io_data"),
    run:
        inputs_xarray, target_xarray = run_model.select_inputs_targets(inputs = config['inputs'], 
                                                                target = config['target'], 
                                                                train_start_date = config['train_start_date'], 
                                                                test_end_date = config['test_end_date'], 
                                                                out_dir = config['out_dir'],
                                                                inc_ante = config['include_antecedant_data']) 
        run_model.prep_input_target_data(inputs_xarray = inputs_xarray, target_xarray = target_xarray, 
                              train_start_date = config['train_start_date'], 
                              train_end_date = config['train_end_date'], 
                              val_start_date = config['val_start_date'], 
                              val_end_date = config['val_end_date'], 
                              test_start_date = config['test_start_date'], 
                              test_end_date = config['test_end_date'], 
                              seq_len = config['seq_len'], 
                              offset = config['offset'], 
                              out_dir = config['out_dir'])
##---------------------------------------------------------------------------------------##  

###########################################################################################                        
#HYPERPARAMETER TESTING
###########################################################################################                                
rule hyperparameter_testing:
    input:
        "03_model/hyperparameter_config.yaml"
    run:
        run_model.test_hyperparameters()
        

##---------------------------------------------------------------------------------------##  

###########################################################################################                        
#RUN REPLICATES
###########################################################################################
rule run_replicates:
    input:
        "03_model/model_config.yaml", 
        os.path.join(config['out_dir'], config['run_id'], 'prepped_model_io_data')
    output:
        expand(os.path.join(config['out_dir'], config['run_id'], '{rep}/model_param_output.txt'), rep = replicates),
        expand(os.path.join(config['out_dir'], config['run_id'], '{rep}/losses.png'), rep = replicates),
        expand(os.path.join(config['out_dir'], config['run_id'], '{rep}/weights.pt'), rep = replicates)
    run:
        run_model.run_replicates(config['replicates'], os.path.join(config['out_dir'], config['run_id'],'prepped_model_io_data'))
        
##---------------------------------------------------------------------------------------##
